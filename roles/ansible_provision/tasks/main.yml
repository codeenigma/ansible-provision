---
- name: Create the provision user for provisioning.
  user:
    name: "{{ ansible_provision.username }}"
    comment: Provisioning
    shell: /bin/bash
    group: "{{ ansible_provision.username }}"
    uid: "{{ ansible_provision.uid | default(omit) }}"

- name: Create an .ssh folder.
  file:
    path: "/home/{{ ansible_provision.username }}/.ssh"
    state: directory
    owner: "{{ ansible_provision.username }}"
    group: "{{ ansible_provision.username }}"
    mode: 0700

- name: Check if we have an SSH key for the provision user.
  stat:
    path: "/home/{{ ansible_provision.username }}/.ssh/id_rsa.pub"
  register: ansible_provision_ssh_pubkey

- name: generate an SSH key pair for the provision user.
  command: ssh-keygen -t rsa -b 4096 -N "" -f "/home/{{ ansible_provision.username }}/.ssh/id_rsa"
  when: not ansible_provision_ssh_pubkey.stat.exists

- name: Set permissions for private key.
  file:
    path: "/home/{{ ansible_provision.username }}/.ssh/id_rsa"
    state: file
    owner: "{{ ansible_provision.username }}"
    group: "{{ ansible_provision.username }}"
    mode: 0600

- name: Set permissions for public key.
  file:
    path: "/home/{{ ansible_provision.username }}/.ssh/id_rsa.pub"
    state: file
    owner: "{{ ansible_provision.username }}"
    group: "{{ ansible_provision.username }}"
    mode: 0644

# This prevent the original var to be re-evaluated when we move things around.
- name: Register config repository.
  set_fact:
    ansible_provision_has_config_repo: "{{ 'yes' if ansible_provision.config_repository else 'no' }}"

- name: Ensure Git is installed.
  apt:
    pkg: "git"
    state: present

- name: Ensure provision scripts are presents.
  git:
    repo: "{{ ansible_provision.own_repository | default('https://github.com/codeenigma/ansible-provision.git')}}"
    dest: "{{ ansible_provision.local_dir }}"
    version: "{{ ansible_provision.own_repository_branch  | default('master') }}"
    update: yes
    accept_hostkey: yes #@todo?
  become: yes
  become_user: "{{ ansible_provision.username }}"

- name: Checkout config directory.
  git:
    repo: "{{ ansible_provision.config_repository }}"
    accept_hostkey: yes
    dest: "{{ ansible_provision.local_dir }}/config"
  become: yes
  become_user: "{{ ansible_provision.username }}"
  when: ansible_provision_has_config_repo

- name: Create defaults folders.
  file:
    path: "{{ ansible_provision.local_dir }}/{{ item }}"
    state: directory
  with_items:
    - hosts
  when: not ansible_provision_has_config_repo

- name: Create default config.
  copy:
    src: ansible.cfg
    dest: "{{ ansible_provision.local_dir }}/ansible.cfg"
  when: not ansible_provision_has_config_repo

- name: Symlink config folders to /etc/ansible.
  file:
    dest: "{{ ansible_provision.local_dir }}/{{ item }}"
    src: "{{ ansible_provision.local_dir }}/config/{{ item }}"
    state: link
  with_items:
    - hosts
    - files
    - templates
    - ansible.cfg
  when: ansible_provision_has_config_repo

- name: Create data dir.
  file:
    path: "{{ ansible_provision.local_dir }}/data"
    state: directory

- name: Ensure ownership of Ansible folder.
  file:
    path: "{{ ansible_provision.local_dir }}"
    state: directory
    owner: "{{ ansible_provision.username }}"
    recurse: yes