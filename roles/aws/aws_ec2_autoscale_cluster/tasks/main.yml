- name: Define unique name for resources.
  set_fact:
    _aws_ec2_autoscale_cluster_unique_name: "{{ aws_ec2_autoscale_cluster.name }}-{{ ansible_date_time.iso8601_basic_short }}"

- name: Gather VPC information
  ec2_vpc_net_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    filters:
      "tag:Name": "{{ aws_ec2_autoscale_cluster.vpc_name }}"
  register: _aws_ec2_autoscale_cluster_vpc
  when: ( aws_ec2_autoscale_cluster.vpc_name is defined and aws_ec2_autoscale_cluster.vpc_name | length > 0 )

- name: Set the VPC id from name.
  set_fact:
    _aws_ec2_autoscale_cluster_vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
  when: ( aws_ec2_autoscale_cluster.vpc_name is defined and aws_ec2_autoscale_cluster.vpc_name | length > 0 )

- name: Create an S3 bucket to hold codebase.
  amazon.aws.s3_bucket:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags | combine( { 'Name': aws_ec2_autoscale_cluster.name } ) }}"
    state: present
  register: _aws_ec2_autoscale_cluster_bucket

- name: Create a matching policy.
  community.aws.iam_managed_policy:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    policy_name: "{{ aws_ec2_autoscale_cluster.name }}-s3-deploy"
    policy:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Action: "s3:*"
          Resource: "arn:aws:s3:::{{ aws_ec2_autoscale_cluster.vpc_name }}"
    make_default: true
    state: present
  register: _aws_ec2_autoscale_cluster_bucket_policy

- name: Create an IAM role.
  community.aws.iam_role:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    assume_role_policy_document: "{{ lookup('file','document_policy.json') }}"
    managed_policies:
      - "{{ _aws_ec2_autoscale_cluster_bucket_policy.policy.arn }}"
    purge_policies: true

- name: Gather IAM role info.
  community.aws.iam_role_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
  register: _aws_ec2_autoscale_cluster_iam_role_info

- name: Use provided VPC id.
  set_fact:
    _aws_ec2_autoscale_cluster_vpc_id: "{{ aws_ec2_autoscale_cluster.vpc_id }}"
  when: ( aws_ec2_autoscale_cluster.vpc_name is not defined or aws_ec2_autoscale_cluster.vpc_name | length < 0 )

- name: Create matching Security Group.
  ec2_group:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags | combine( { 'Name': aws_ec2_autoscale_cluster.name } ) }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc_id }}"
    description: "Allow internal traffic for cluster {{ aws_ec2_autoscale_cluster.name }}"
    rules:
      - proto: all
        group_name: "{{ aws_ec2_autoscale_cluster.name }}"
  register: _aws_ec2_autoscale_cluster_security_group

- name: Gather existing EFS info.
  efs_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.efs }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
  register: _aws_ec2_autoscale_cluster_existing_efs
  when:
    - aws_ec2_autoscale_cluster.efs | length > 1
    - aws_ec2_autoscale_cluster.efs != self

- name: Gather EFS security group info.
  amazon.aws.ec2_group_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    filters:
      "tag:Name": "{{ aws_ec2_autoscale_cluster.efs }}"
      vpc-id: "{{ _aws_ec2_autoscale_cluster_vpc_id }}"
  register: _aws_ec2_autoscale_cluster_existing_efs_security_group
  when:
    - aws_ec2_autoscale_cluster.efs | length > 1
    - aws_ec2_autoscale_cluster.efs != self

- name: Reset subnets lists.
  set_fact:
    _aws_ec2_autoscale_cluster_subnets_ids: []
    _aws_ec2_autoscale_cluster_efs_targets: []
    _aws_ec2_autoscale_cluster_efs_self_targets: []
    _aws_ec2_autoscale_cluster_public_subnets_ids: []
    _aws_ec2_autoscale_cluster_subnets_names: []

- name: Create private subnets.
  include_tasks: subnet.yml
  with_items: "{{ aws_ec2_autoscale_cluster.subnets }}"
  loop_control:
    loop_var: subnet

- name: Create RDS instance
  include_role:
    name: aws/aws_rds
  vars:
    aws_rds:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      instance_type: "{{ aws_ec2_autoscale_cluster.rds.db_instance_class }}"
      subnets: "{{ _aws_ec2_autoscale_cluster_subnets_ids }}"
      name: "{{ aws_ec2_autoscale_cluster.name }}"
      description: "{{ aws_ec2_autoscale_cluster.name }}"
      tags: "{{ aws_ec2_autoscale_cluster.tags }}"
      engine: "{{ aws_ec2_autoscale_cluster.rds.engine }}"
      engine_version: "{{ aws_ec2_autoscale_cluster.rds.engine_version | default(omit) }}"
      allocated_storage: "{{ aws_ec2_autoscale_cluster.rds.allocated_storage }}"
      max_allocated_storage: "{{ aws_ec2_autoscale_cluster.rds.max_allocated_storage }}"
      master_username: "{{ aws_ec2_autoscale_cluster.rds.master_username }}"
      master_user_password: "{{ aws_ec2_autoscale_cluster.rds.master_user_password }}"
      multi_az: "{{ aws_ec2_autoscale_cluster.rds.multi_az }}"
      security_groups:
        - "{{ _aws_ec2_autoscale_cluster_security_group.group_name }}"
  when:
    - aws_ec2_autoscale_cluster.rds.rds is defined
    - aws_ec2_autoscale_cluster.rds.rds

- name: Create EFS volume
  efs:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags }}"
    targets: "{{ _aws_ec2_autoscale_cluster_efs_self_targets }}"
  when:
    - aws_ec2_autoscale_cluster.efs == self

- name: Register new targets
  efs:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.efs }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    purge_tags: false
    targets: "{{ _aws_ec2_autoscale_cluster_efs_targets + _aws_ec2_autoscale_cluster_existing_efs.efs[0].mount_targets }}"
  when:
    - aws_ec2_autoscale_cluster.efs | length > 1
    - aws_ec2_autoscale_cluster.efs != self

- name: Create new AMI.
  include_role:
    name: aws/ami_debian_buster
  vars:
    ami_debian_buster:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      instance_type: "{{ aws_ec2_autoscale_cluster.instance_type }}"
      ami_name: "{{ _aws_ec2_autoscale_cluster_unique_name }}"
      playbook_file: "{{ aws_ec2_autoscale_cluster.ami_playbook_file }}"
      operation: create

- name: Gather AMI image from name.
  ec2_ami_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    owners: self
    filters:
      name: "{{ _aws_ec2_autoscale_cluster_unique_name }}"
  register: aws_ec2_autoscale_cluster_image

- name: Register latest AMI image.
  set_fact:
    aws_ec2_autoscale_cluster_image_latest: "{{ aws_ec2_autoscale_cluster_image.images | sort(attribute='creation_date') | last }}"

- name: Create Launch Configuration
  ec2_lc:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ _aws_ec2_autoscale_cluster_unique_name }}"
    image_id: "{{ aws_ec2_autoscale_cluster_image_latest.image_id }}"
    key_name: "{{ aws_ec2_autoscale_cluster.key_name }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
    security_groups: "{{ aws_ec2_autoscale_cluster.cluster_security_groups + [ _aws_ec2_autoscale_cluster_security_group.group_id ] }}"
    instance_type: "{{ aws_ec2_autoscale_cluster.instance_type }}"
    instance_profile_name: "{{ _aws_ec2_autoscale_cluster_iam_role_info.iam_roles[0].instance_profiles[0].arn }}"
    ebs_optimized: "{{ aws_ec2_autoscale_cluster.ebs_optimized }}"
    volumes:
      - device_name: /dev/xvda
        volume_size: "{{ aws_ec2_autoscale_cluster.root_volume_size }}"
  register: _aws_ec2_lc_created

- name: Create a Target group for port 80
  elb_target_group:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags }}"
    protocol: http
    port: 80
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
  register: _aws_ec2_target_group_created

- name: Create Autoscale group and replace instances.
  community.aws.ec2_asg:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    launch_config_name: "{{ _aws_ec2_lc_created.name }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    replace_all_instances: true
    wait_for_instances: true
    wait_timeout: 3000
    replace_batch_size: "{{ aws_ec2_autoscale_cluster.min_size }}"
    min_size: "{{ aws_ec2_autoscale_cluster.min_size }}"
    desired_capacity: "{{ aws_ec2_autoscale_cluster.min_size }}"
    max_size: "1000"
    tags: "{{ aws_ec2_autoscale_cluster.tags | simpledict2list }}"
    vpc_zone_identifier: "{{ _aws_ec2_autoscale_cluster_subnets_ids }}"
    target_group_arns:
      - "{{ _aws_ec2_target_group_created.target_group_arn }}"
  register: _aws_ec2_asg_created

- name: Redefine Autoscale group.
  community.aws.ec2_asg:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    launch_config_name: "{{ _aws_ec2_lc_created.name }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    replace_all_instances: false
    wait_for_instances: false
    min_size: "{{ aws_ec2_autoscale_cluster.min_size }}"
    desired_capacity: "{{ aws_ec2_autoscale_cluster.min_size }}"
    max_size: "{{ aws_ec2_autoscale_cluster.max_size }}"
    termination_policies:
      - OldestLaunchConfiguration
      - OldestInstance
    tags: "{{ aws_ec2_autoscale_cluster.tags | simpledict2list }}"
    vpc_zone_identifier: "{{ _aws_ec2_autoscale_cluster_subnets_ids }}"
    target_group_arns:
      - "{{ _aws_ec2_target_group_created.target_group_arn }}"
  register: _aws_ec2_asg_created

- name: Define default listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners_http:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_ec2_autoscale_cluster.name }}"
    _aws_ec2_autoscale_cluster_listeners_redirect:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Host: "#{host}"
            Query: "#{query}"
            Path: "/#{path}"
            Port: "443"
            StatusCode: HTTP_301
    _aws_ec2_autoscale_cluster_listeners_https:
      Protocol: HTTPS
      Port: "443"
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: "{{ aws_ec2_autoscale_cluster.ssl_certificate_ARN }}"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_ec2_autoscale_cluster.name }}"

- name: Add HTTP listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ [ _aws_ec2_autoscale_cluster_listeners_http ] }}"
  when: aws_ec2_autoscale_cluster.ssl_certificate_ARN | length < 1

- name: Add HTTPS Listener.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ [ _aws_ec2_autoscale_cluster_listeners_redirect, _aws_ec2_autoscale_cluster_listeners_https ] }}"
  when: aws_ec2_autoscale_cluster.ssl_certificate_ARN | length > 1

- name: Add custom Listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ _aws_ec2_autoscale_cluster_listeners + aws_ec2_autoscale_cluster.listeners }}"
  when:
    - aws_ec2_autoscale_cluster is defined
    - aws_ec2_autoscale_cluster | length

- name: Create the ALB.
  community.aws.elb_application_lb:
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags }}"
    subnets: "{{ _aws_ec2_autoscale_cluster_public_subnets_ids }}"
    security_groups: "{{ aws_ec2_autoscale_cluster.alb_security_groups + [ _aws_ec2_autoscale_cluster_security_group.group_id ] }}"
    listeners: "{{ _aws_ec2_autoscale_cluster_listeners }}"
  register: _aws_ec2_autoscale_cluster_alb

- name: Add a DNS record in route 53
  community.aws.route53:
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    profile: "{{ aws_ec2_autoscale_cluster.route_53.aws_profile }}"
    zone: "{{ aws_ec2_autoscale_cluster.route_53.zone }}"
    record: "{{ aws_ec2_autoscale_cluster.route_53.record }}"
    type: CNAME
    value: "{{ _aws_ec2_autoscale_cluster_alb.dns_name }}"
  when:
    - aws_ec2_autoscale_cluster.route_53.zone is defined
    - aws_ec2_autoscale_cluster.route_53.zone | length > 0

- name: Create peering VPC connections
  include_tasks: peering.yml
  with_items: "{{ aws_ec2_autoscale_cluster.peering }}"
  loop_control:
    loop_var: peering
