---

- name: Add repository key for Jenkins.
  apt_key: url=https://pkg.jenkins.io/debian/jenkins.io.key state=present

- name: Add repository for Jenkins.
  apt_repository: repo='deb http://pkg.jenkins.io/debian binary/' state=present

- name: Ensure Jenkins is installed.
  apt:
    pkg: "jenkins"
    state: present
    update_cache: yes
  register: aptoutput

- name: Generates SSL keys.
  include_role:
    name: "{{ jenkins.ssl_handling }}"
  vars:
    ssl:
      domain: "{{ jenkins.server_name }}"
      services: []

- name: Check if we have an existing keystore.
  stat:
    path: "/var/lib/jenkins/{{ jenkins.server_name }}.jks"
  register: jenkins_keystore

- name: Convert SSL key to intermediate PK12.
  command: "openssl pkcs12 -export -out /dev/shm/jenkins_keystore.p12 -passout 'pass:{{ jenkins.keystore_pass }}' -inkey {{ _ssl_paths[jenkins.server_name].key }} -in {{ _ssl_paths[jenkins.server_name].certificate }} -name {{ jenkins.server_name }}"
  when: not jenkins_keystore.stat.exists

- name: Convert PK12 to keystore.
  command: "keytool -importkeystore -srckeystore /dev/shm/jenkins_keystore.p12 -srcstorepass '{{ jenkins.keystore_pass }}' -srcstoretype PKCS12 -srcalias {{ jenkins.server_name }} -deststoretype JKS -destkeystore /var/lib/jenkins/{{ jenkins.server_name }}.jks -deststorepass '{{ jenkins.keystore_pass }}' -destalias {{ jenkins.server_name }}"
  when: not jenkins_keystore.stat.exists

- name: Ensure keystore ownership.
  file:
    path: /var/lib/jenkins
    owner: "{{ jenkins.user }}"
    group: "{{ jenkins.user }}"
    recurse: true

- name: Ensure log ownership.
  file:
    path: /var/log/jenkins
    owner: "{{ jenkins.user }}"
    group: "{{ jenkins.user }}"
    recurse: true

- name: Ensure cache ownership.
  file:
    path: /var/cache/jenkins
    owner: "{{ jenkins.user }}"
    group: "{{ jenkins.user }}"
    recurse: true

- name: Copy Jenkins configuration file.
  template:
    src: "jenkins.j2"
    dest: /etc/default/jenkins

- name: Trigger overrides
  include_role:
    name: _overrides

- name: Create init.groovy.d directory
  file:
    path: "/var/lib/jenkins/init.groovy.d"
    state: directory
    mode: '0755'

- name: Check if groovy security file exists
  stat:
    path: "/var/lib/jenkins/init.groovy.d/basic-security.groovy"

- name: Copy groovy security file
  template:
    src: "basic-security.groovy.j2"
    dest: "/var/lib/jenkins/init.groovy.d/basic-security.groovy"
    owner: "{{ jenkins.user }}"
    group: "{{ jenkins.user }}"
    mode: 0775

- name: restart jenkins
  service:
    name: jenkins
    state: restarted
  when: aptoutput.changed

- pause:
    minutes: 2
  when: aptoutput.changed

- name: Download Jenkins CLI
  get_url:
    url: "https://localhost:{{ jenkins.listen_https_port }}/jnlpJars/jenkins-cli.jar"
    validate_certs: no
    dest: /opt/jenkins-cli.jar

- name: Install Jenkins cert renewal script
  template:
    src: "jenkins-cert-renewal.j2"
    dest: "/opt/jenkins-cert-renewal.sh"
    owner: root
    group: root
    mode: 0775
# @todo this needs refactoring, we want to run right after cerbot, not independently.
- name: Add Jenkins cert renewal job
  lineinfile:
    path: '/etc/cron.d/certbot'
    line: "{{ jenkins.schedule }} root  /bin/sh /opt/jenkins-cert-renewal >> /var/log/jenkins/jenkins-cert-renewal.log"
    create: yes
    insertafter: EOF

- name: Install Jenkins Plugins
  command: "java -jar /opt/jenkins-cli.jar -auth {{ jenkins.adminuser }}:{{ jenkins.adminpass }}  -noCertificateCheck -s https://localhost:{{ jenkins.listen_https_port }}/ install-plugin {{ jenkins.plugins | join(' ') }}"
  become: yes
  become_user: "{{ jenkins.user }}"
  register: pluginoutput

- name: Safe restart jenkins
  command: "java -jar /opt/jenkins-cli.jar -auth {{ jenkins.adminuser }}:{{ jenkins.adminpass }}  -noCertificateCheck -s https://localhost:{{ jenkins.listen_https_port }}/ safe-restart"
  become: yes
  become_user: "{{ jenkins.user }}"
  when: pluginoutput.changed
